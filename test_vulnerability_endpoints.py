#!/usr/bin/env python3
"""
Script para testar endpoints de vulnerabilidade
"""

import requests
import json

# URL do backend
BASE_URL = "https://hakon-56ae06ddc8d1.herokuapp.com"

def get_auth_token():
    """Obter token de autenticação"""
    login_data = {
        "username": "admin",
        "password": "admin"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/auth/login",
            json=login_data,
            timeout=10
        )
        
        if response.status_code == 200:
            token_data = response.json()
            return token_data.get("access_token")
        else:
            print(f"❌ Erro no login: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"❌ Erro ao obter token: {e}")
        return None

def test_endpoint_with_auth(endpoint, token):
    """Testar endpoint com autenticação"""
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print("   ✅ Sucesso!")
            data = response.json()
            if isinstance(data, list):
                print(f"   📊 Retornou {len(data)} itens")
            else:
                print(f"   📊 Resposta: {json.dumps(data, indent=2)}")
        else:
            print(f"   ❌ Erro: {response.text}")
            
    except Exception as e:
        print(f"   ❌ Erro: {e}")

def test_endpoint_without_auth(endpoint):
    """Testar endpoint sem autenticação"""
    try:
        response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 401:
            print("   ⚠️  Requer autenticação (esperado)")
        elif response.status_code == 200:
            print("   ✅ Funcionou sem autenticação")
        else:
            print(f"   ❌ Erro: {response.text}")
            
    except Exception as e:
        print(f"   ❌ Erro: {e}")

def main():
    """Testar todos os endpoints"""
    
    print("=== Testando Endpoints de Vulnerabilidade ===")
    print(f"Base URL: {BASE_URL}")
    print()
    
    # Obter token de autenticação
    print("1. Obtendo token de autenticação...")
    token = get_auth_token()
    
    if not token:
        print("❌ Não foi possível obter token. Testando sem autenticação...")
        token = None
    
    print(f"   Token: {token[:20] if token else 'Nenhum'}...")
    print()
    
    # Lista de endpoints para testar
    endpoints = [
        "/api/vulnerability/months",
        "/api/vulnerability/uploads", 
        "/api/vulnerability/list",
        "/api/vulnerability/upload"
    ]
    
    for endpoint in endpoints:
        print(f"2. Testando {endpoint}...")
        
        if token:
            test_endpoint_with_auth(endpoint, token)
        else:
            test_endpoint_without_auth(endpoint)
        
        print()
    
    print("=== Resumo ===")
    print("Endpoints disponíveis:")
    print("✅ /api/vulnerability/months - Lista meses")
    print("✅ /api/vulnerability/uploads - Lista vulnerabilidades")
    print("✅ /api/vulnerability/list - Lista vulnerabilidades")
    print("✅ /api/vulnerability/upload - Upload de arquivo CSV")
    print()
    print("Para usar no frontend, inclua o token no header:")
    print("Authorization: Bearer <seu_token>")

if __name__ == "__main__":
    main() 