#!/usr/bin/env python3
"""
Script para verificar e corrigir problemas no banco de dados
"""

import os
import sys
from dotenv import load_dotenv

# Adiciona o app directory ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

load_dotenv()

from app.database import engine, SessionLocal
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_tables():
    """Verifica se as tabelas necess√°rias existem"""
    
    db = SessionLocal()
    
    try:
        logger.info("üîç Verificando tabelas do banco de dados...")
        
        # Verifica tabela vulnerabilities
        result = db.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = 'vulnerabilities'
        """))
        
        if result.fetchone():
            logger.info("‚úÖ Tabela vulnerabilities existe")
        else:
            logger.error("‚ùå Tabela vulnerabilities n√£o existe!")
            return False
        
        # Verifica tabela vulnerability_manual_change_history
        result = db.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = 'vulnerability_manual_change_history'
        """))
        
        if result.fetchone():
            logger.info("‚úÖ Tabela vulnerability_manual_change_history existe")
        else:
            logger.warning("‚ö†Ô∏è Tabela vulnerability_manual_change_history n√£o existe")
            return False
        
        # Verifica campos na tabela vulnerabilities
        result = db.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'vulnerabilities' 
            AND column_name IN ('original_severity', 'severity_manually_changed', 'original_status', 'status_manually_changed')
        """))
        
        existing_columns = [row[0] for row in result.fetchall()]
        logger.info(f"üìã Campos existentes na tabela vulnerabilities: {existing_columns}")
        
        required_columns = ['original_severity', 'severity_manually_changed', 'original_status', 'status_manually_changed']
        missing_columns = [col for col in required_columns if col not in existing_columns]
        
        if missing_columns:
            logger.warning(f"‚ö†Ô∏è Campos faltando: {missing_columns}")
            return False
        
        logger.info("‚úÖ Todas as tabelas e campos necess√°rios existem")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar tabelas: {e}")
        return False
    finally:
        db.close()

def run_migrations():
    """Executa as migra√ß√µes necess√°rias"""
    
    logger.info("üöÄ Executando migra√ß√µes...")
    
    try:
        # Importa e executa o script de migra√ß√£o
        from migrate_manual_changes import main as run_migration
        run_migration()
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
        return False

def test_simple_query():
    """Testa uma query simples para verificar se o banco est√° funcionando"""
    
    db = SessionLocal()
    
    try:
        logger.info("üß™ Testando query simples...")
        
        # Testa buscar uma vulnerabilidade
        result = db.execute(text("SELECT COUNT(*) FROM vulnerabilities"))
        count = result.fetchone()[0]
        
        logger.info(f"‚úÖ Query funcionou! Encontradas {count} vulnerabilidades")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na query: {e}")
        return False
    finally:
        db.close()

def main():
    """Fun√ß√£o principal"""
    logger.info("üîß Verifica√ß√£o e corre√ß√£o do banco de dados")
    logger.info("=" * 50)
    
    # Testa query simples primeiro
    if not test_simple_query():
        logger.error("‚ùå Banco de dados n√£o est√° acess√≠vel")
        return
    
    # Verifica tabelas
    if not check_tables():
        logger.warning("‚ö†Ô∏è Problemas encontrados no banco. Executando migra√ß√µes...")
        
        if run_migrations():
            logger.info("‚úÖ Migra√ß√µes executadas com sucesso")
            
            # Verifica novamente
            if check_tables():
                logger.info("üéâ Banco de dados corrigido com sucesso!")
            else:
                logger.error("‚ùå Problemas persistem ap√≥s migra√ß√µes")
        else:
            logger.error("‚ùå Falha ao executar migra√ß√µes")
    else:
        logger.info("üéâ Banco de dados est√° OK!")

if __name__ == "__main__":
    main() 