"""
Simplified vulnerability service functions without manual change fields
"""

from typing import List, Dict, Any
from fastapi import HTTPException
from sqlalchemy.orm import Session

from app.models.vulnerability import Vulnerability

def change_vulnerability_severity_simple(db: Session, vulnerability_id: int, new_severity: str, changed_by: str, reason: str = None):
    """Altera manualmente a severidade de uma vulnerabilidade (versão simplificada)"""
    
    # Busca a vulnerabilidade
    vuln = db.query(Vulnerability).filter(Vulnerability.id == vulnerability_id).first()
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    # Valida a nova severidade
    valid_severities = ["Critical", "High", "Medium", "Low", "Info"]
    if new_severity not in valid_severities:
        raise HTTPException(status_code=400, detail=f"Invalid severity. Must be one of: {valid_severities}")
    
    # Atualiza a vulnerabilidade
    old_severity = vuln.severity
    vuln.severity = new_severity
    
    # Tenta atualizar campos de controle se existirem
    try:
        vuln.severity_manually_changed = True
    except AttributeError:
        pass
    
    db.commit()
    db.refresh(vuln)
    
    return vuln

def change_vulnerability_severity_by_hash_simple(db: Session, vuln_hash: str, new_severity: str, changed_by: str, reason: str = None):
    """Altera manualmente a severidade de uma vulnerabilidade usando o hash (versão simplificada)"""
    
    # Busca a vulnerabilidade pelo hash (pega a mais recente se houver múltiplas)
    vuln = db.query(Vulnerability).filter(
        Vulnerability.vuln_hash == vuln_hash
    ).order_by(Vulnerability.reference_month.desc()).first()
    
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    # Valida a nova severidade
    valid_severities = ["Critical", "High", "Medium", "Low", "Info"]
    if new_severity not in valid_severities:
        raise HTTPException(status_code=400, detail=f"Invalid severity. Must be one of: {valid_severities}")
    
    # Atualiza a vulnerabilidade
    old_severity = vuln.severity
    vuln.severity = new_severity
    
    # Tenta atualizar campos de controle se existirem
    try:
        vuln.severity_manually_changed = True
    except AttributeError:
        pass
    
    db.commit()
    db.refresh(vuln)
    
    return vuln

def change_vulnerability_status_simple(db: Session, vulnerability_id: int, new_status: str, changed_by: str, reason: str = None):
    """Altera manualmente o status de uma vulnerabilidade (versão simplificada)"""
    
    # Busca a vulnerabilidade
    vuln = db.query(Vulnerability).filter(Vulnerability.id == vulnerability_id).first()
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    # Valida o novo status
    valid_statuses = ["new", "ongoing", "reopened", "closed"]
    if new_status not in valid_statuses:
        raise HTTPException(status_code=400, detail=f"Invalid status. Must be one of: {valid_statuses}")
    
    # Atualiza a vulnerabilidade
    old_status = vuln.status
    vuln.status = new_status
    
    # Tenta atualizar campos de controle se existirem
    try:
        vuln.status_manually_changed = True
    except AttributeError:
        pass
    
    db.commit()
    db.refresh(vuln)
    
    return vuln

def change_vulnerability_status_by_hash_simple(db: Session, vuln_hash: str, new_status: str, changed_by: str, reason: str = None):
    """Altera manualmente o status de uma vulnerabilidade usando o hash (versão simplificada)"""
    
    # Busca a vulnerabilidade pelo hash (pega a mais recente se houver múltiplas)
    vuln = db.query(Vulnerability).filter(
        Vulnerability.vuln_hash == vuln_hash
    ).order_by(Vulnerability.reference_month.desc()).first()
    
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    # Valida o novo status
    valid_statuses = ["new", "ongoing", "reopened", "closed"]
    if new_status not in valid_statuses:
        raise HTTPException(status_code=400, detail=f"Invalid status. Must be one of: {valid_statuses}")
    
    # Atualiza a vulnerabilidade
    old_status = vuln.status
    vuln.status = new_status
    
    # Tenta atualizar campos de controle se existirem
    try:
        vuln.status_manually_changed = True
    except AttributeError:
        pass
    
    db.commit()
    db.refresh(vuln)
    
    return vuln 