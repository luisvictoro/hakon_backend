from datetime import datetime
from typing import Dict, Any
from pydantic import BaseModel, ConfigDict

class VulnerabilityBase(BaseModel):
    ip: str
    hostname: str | None = None
    nvt_name: str
    severity: str
    cvss: float | None = None
    cves: str | None = None
    reference_month: str

class VulnerabilityCreate(VulnerabilityBase):
    pass

class Vulnerability(VulnerabilityBase):
    id: int
    created_at: datetime
    vuln_hash: str
    status: str

    model_config = ConfigDict(from_attributes=True)


class ScanTemplateBase(BaseModel):
    name: str
    source: str
    column_mapping: Dict[str, str]
    severity_map: Dict[str, str]

class ScanTemplateCreate(ScanTemplateBase):
    pass

class ScanTemplate(ScanTemplateBase):
    id: int
    created_by: str
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)


class VulnerabilityStatusHistoryBase(BaseModel):
    vuln_hash: str
    month: str
    status: str

class VulnerabilityStatusHistoryCreate(VulnerabilityStatusHistoryBase):
    pass

class VulnerabilityStatusHistory(VulnerabilityStatusHistoryBase):
    id: int
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)
