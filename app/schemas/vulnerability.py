from datetime import datetime
from typing import Dict, Any, List
from pydantic import BaseModel, ConfigDict

class VulnerabilityBase(BaseModel):
    ip: str
    hostname: str | None = None
    nvt_name: str
    severity: str
    cvss: float | None = None
    cves: str | None = None
    reference_month: str

class VulnerabilityCreate(VulnerabilityBase):
    pass

class Vulnerability(VulnerabilityBase):
    id: int
    created_at: datetime
    vuln_hash: str
    status: str
    original_severity: str
    severity_manually_changed: bool
    original_status: str
    status_manually_changed: bool

    model_config = ConfigDict(from_attributes=True)


class ScanTemplateBase(BaseModel):
    name: str
    source: str
    column_mapping: Dict[str, str]
    severity_map: Dict[str, str]

class ScanTemplateCreate(ScanTemplateBase):
    pass

class ScanTemplate(ScanTemplateBase):
    id: int
    created_by: str
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)


class VulnerabilityStatusHistoryBase(BaseModel):
    vuln_hash: str
    month: str
    status: str

class VulnerabilityStatusHistoryCreate(VulnerabilityStatusHistoryBase):
    pass

class VulnerabilityStatusHistory(VulnerabilityStatusHistoryBase):
    id: int
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)


# Schemas para alterações manuais
from enum import Enum

class FieldChangedEnum(str, Enum):
    severity = "severity"
    status = "status"

class ManualChangeBase(BaseModel):
    field_changed: FieldChangedEnum
    new_value: str
    reason: str | None = None

class ManualChangeCreate(ManualChangeBase):
    pass

class ManualChangeResponse(ManualChangeBase):
    id: int
    vulnerability_id: int
    vuln_hash: str
    old_value: str
    changed_by: str
    changed_at: datetime

    model_config = ConfigDict(from_attributes=True)


class VulnerabilityManualChangeHistoryBase(BaseModel):
    vulnerability_id: int
    vuln_hash: str
    field_changed: str
    old_value: str
    new_value: str
    changed_by: str
    reason: str | None = None

class VulnerabilityManualChangeHistoryCreate(VulnerabilityManualChangeHistoryBase):
    pass

class VulnerabilityManualChangeHistory(VulnerabilityManualChangeHistoryBase):
    id: int
    changed_at: datetime

    model_config = ConfigDict(from_attributes=True)


# Dashboard Schemas
class DashboardStats(BaseModel):
    total_vulnerabilities: int
    total_by_status: Dict[str, int]
    total_by_severity: Dict[str, int]
    total_by_month: Dict[str, int]
    top_vulnerabilities: List[Dict[str, Any]]
    recent_activity: List[Dict[str, Any]]

class StatusCount(BaseModel):
    status: str
    count: int

class SeverityCount(BaseModel):
    severity: str
    count: int

class MonthCount(BaseModel):
    month: str
    count: int

class VulnerabilitySummary(BaseModel):
    nvt_name: str
    count: int
    severity: str
    affected_hosts: int

class ActivityItem(BaseModel):
    month: str
    new_count: int
    ongoing_count: int
    reopened_count: int
    closed_count: int


# API de Campos Esperados
class ExpectedField(BaseModel):
    name: str
    required: bool
    description: str
    example: str | None = None
    data_type: str

class ExpectedFieldsResponse(BaseModel):
    required_fields: List[ExpectedField]
    optional_fields: List[ExpectedField]
    severity_levels: List[str]
    example_mapping: Dict[str, str]
