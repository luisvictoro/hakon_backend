from fastapi import APIRouter, Depends, UploadFile, File, Form
from sqlalchemy.orm import Session

from app import schemas
from app.services import vulnerability as vuln_service, auth as auth_service

router = APIRouter(dependencies=[Depends(auth_service.get_current_user)])


@router.get("/months", response_model=list[str])
def list_months(db: Session = Depends(auth_service.get_db)):
    return vuln_service.get_months(db)


@router.get("/uploads", response_model=list[schemas.Vulnerability])
def list_uploads(db: Session = Depends(auth_service.get_db)):
    """List all vulnerabilities (alias for /list)"""
    return vuln_service.list_vulnerabilities(db)


@router.post("/upload")
def upload_csv(
    month: str = Form(...), 
    template_id: int = Form(...),
    file: UploadFile = File(...), 
    db: Session = Depends(auth_service.get_db)
):
    vuln_service.save_csv(db, file, month, template_id)
    return {"message": "Upload successful"}


@router.get("/list", response_model=list[schemas.Vulnerability])
def list_vulns(skip: int = 0, limit: int = 100, db: Session = Depends(auth_service.get_db)):
    return vuln_service.list_vulnerabilities(db, skip=skip, limit=limit)


@router.get("/history/{vuln_hash}", response_model=list[schemas.VulnerabilityStatusHistory])
def get_vulnerability_history(vuln_hash: str, db: Session = Depends(auth_service.get_db)):
    """Retorna histórico de uma vulnerabilidade específica"""
    return vuln_service.get_vulnerability_history(db, vuln_hash)


@router.delete("/uploads/{month}")
def delete_month(month: str, db: Session = Depends(auth_service.get_db)):
    vuln_service.delete_by_month(db, month)
    return {"message": "Deleted"}


@router.delete("/uploads/all")
def delete_all(db: Session = Depends(auth_service.get_db)):
    vuln_service.delete_all(db)
    return {"message": "All deleted"}


# Dashboard Endpoints
@router.get("/dashboard/stats", response_model=schemas.DashboardStats)
def get_dashboard_stats(db: Session = Depends(auth_service.get_db)):
    """Retorna estatísticas completas para dashboard"""
    return vuln_service.get_dashboard_stats(db)


@router.get("/dashboard/status-counts")
def get_status_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por status"""
    return vuln_service.get_status_counts(db)


@router.get("/dashboard/severity-counts")
def get_severity_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por severidade"""
    return vuln_service.get_severity_counts(db)


@router.get("/dashboard/month-counts")
def get_month_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por mês"""
    return vuln_service.get_month_counts(db)


@router.get("/dashboard/top-vulnerabilities")
def get_top_vulnerabilities(limit: int = 10, db: Session = Depends(auth_service.get_db)):
    """Retorna top vulnerabilidades mais frequentes"""
    return vuln_service.get_top_vulnerabilities(db, limit)


@router.get("/dashboard/recent-activity")
def get_recent_activity(months: int = 6, db: Session = Depends(auth_service.get_db)):
    """Retorna atividade recente por mês"""
    return vuln_service.get_recent_activity(db, months)
