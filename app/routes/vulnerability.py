from fastapi import APIRouter, Depends, UploadFile, File, Form
from sqlalchemy.orm import Session

from app import schemas
from app.services import vulnerability as vuln_service, auth as auth_service
from app.services import template as template_service
from fastapi import HTTPException
import pandas as pd

router = APIRouter(dependencies=[Depends(auth_service.get_current_user)])


@router.get("/months", response_model=list[str])
def list_months(db: Session = Depends(auth_service.get_db)):
    return vuln_service.get_months(db)


@router.get("/uploads", response_model=list[schemas.Vulnerability])
def list_uploads(db: Session = Depends(auth_service.get_db)):
    """List all vulnerabilities (alias for /list)"""
    return vuln_service.list_vulnerabilities(db)


@router.post("/upload")
def upload_csv(
    month: str = Form(...), 
    template_id: int = Form(...),
    file: UploadFile = File(...), 
    db: Session = Depends(auth_service.get_db)
):
    vuln_service.save_csv(db, file, month, template_id)
    return {"message": "Upload successful"}


@router.post("/validate-template")
def validate_template_upload(
    template_id: int = Form(...),
    file: UploadFile = File(...), 
    db: Session = Depends(auth_service.get_db)
):
    """Valida se o template é compatível com o CSV antes do upload"""
    try:
        # Busca template
        template = template_service.get_template(db, template_id)
        if not template:
            raise HTTPException(status_code=404, detail="Template not found")
        
        # Lê CSV
        df = pd.read_csv(file.file)
        
        # Valida mapeamento
        errors, warnings = vuln_service.validate_template_mapping(template, df.columns)
        
        return {
            "valid": len(errors) == 0,
            "errors": errors,
            "warnings": warnings,
            "template_info": {
                "id": template.id,
                "name": template.name,
                "source": template.source,
                "column_mapping": template.column_mapping,
                "severity_map": template.severity_map
            },
            "csv_info": {
                "columns": list(df.columns),
                "rows": len(df),
                "sample_data": df.head(2).to_dict('records') if len(df) > 0 else []
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Erro na validação: {str(e)}")


@router.get("/list", response_model=list[schemas.Vulnerability])
def list_vulns(skip: int = 0, limit: int = 100, db: Session = Depends(auth_service.get_db)):
    return vuln_service.list_vulnerabilities(db, skip=skip, limit=limit)


@router.get("/history/{vuln_hash}", response_model=list[schemas.VulnerabilityStatusHistory])
def get_vulnerability_history(vuln_hash: str, db: Session = Depends(auth_service.get_db)):
    """Retorna histórico de uma vulnerabilidade específica"""
    return vuln_service.get_vulnerability_history(db, vuln_hash)


@router.get("/expected-fields", response_model=schemas.ExpectedFieldsResponse)
def get_expected_fields():
    """
    Retorna os campos esperados para upload de vulnerabilidades.
    
    Esta API fornece informações sobre:
    - Campos obrigatórios e opcionais
    - Descrições e exemplos de cada campo
    - Níveis de severidade aceitos
    - Exemplo de mapeamento de colunas
    """
    return vuln_service.get_expected_fields()


@router.put("/{vuln_id}/severity", response_model=schemas.Vulnerability)
def change_severity(
    vuln_id: int,
    data: schemas.UpdateSeverityRequest,
    db: Session = Depends(auth_service.get_db),
    current_user: schemas.User = Depends(auth_service.get_current_user)
):
    """Atualiza a severidade de uma vulnerabilidade"""
    return vuln_service.update_severity(db, vuln_id, data.severity, current_user.username)


@router.put("/{vuln_id}/status", response_model=schemas.Vulnerability)
def change_status(
    vuln_id: int,
    data: schemas.UpdateStatusRequest,
    db: Session = Depends(auth_service.get_db),
    current_user: schemas.User = Depends(auth_service.get_current_user)
):
    """Atualiza o status de uma vulnerabilidade"""
    return vuln_service.update_status(db, vuln_id, data.status, current_user.username)


@router.get("/changes/{vuln_id}", response_model=list[schemas.VulnerabilityChangeHistory])
def get_change_history(vuln_id: int, db: Session = Depends(auth_service.get_db)):
    """Retorna histórico de alterações de uma vulnerabilidade"""
    return vuln_service.get_change_history(db, vuln_id)


@router.delete("/uploads/{month}")
def delete_by_month(month: str, db: Session = Depends(auth_service.get_db)):
    """Deleta todas as vulnerabilidades de um mês específico"""
    vuln_service.delete_by_month(db, month)
    return {"message": f"Vulnerabilities for month {month} deleted successfully"}


@router.delete("/uploads/all")
def delete_all(db: Session = Depends(auth_service.get_db)):
    """Deleta todas as vulnerabilidades"""
    vuln_service.delete_all(db)
    return {"message": "All vulnerabilities deleted successfully"}


# Dashboard Endpoints
@router.get("/dashboard/stats", response_model=schemas.DashboardStats)
def get_dashboard_stats(db: Session = Depends(auth_service.get_db)):
    """Retorna estatísticas completas para dashboard"""
    return vuln_service.get_dashboard_stats(db)


@router.get("/dashboard/status-counts")
def get_status_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por status"""
    return vuln_service.get_status_counts(db)


@router.get("/dashboard/severity-counts")
def get_severity_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por severidade"""
    return vuln_service.get_severity_counts(db)


@router.get("/dashboard/month-counts")
def get_month_counts(db: Session = Depends(auth_service.get_db)):
    """Retorna contagem por mês"""
    return vuln_service.get_month_counts(db)


@router.get("/dashboard/top-vulnerabilities")
def get_top_vulnerabilities(limit: int = 10, db: Session = Depends(auth_service.get_db)):
    """Retorna top vulnerabilidades mais frequentes"""
    return vuln_service.get_top_vulnerabilities(db, limit)


@router.get("/dashboard/recent-activity")
def get_recent_activity(months: int = 6, db: Session = Depends(auth_service.get_db)):
    """Retorna atividade recente por mês"""
    return vuln_service.get_recent_activity(db, months)
